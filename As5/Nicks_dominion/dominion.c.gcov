        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:15
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    20560:    8:int compare(const void* a, const void* b) {
    20560:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    20560:   11:  if (*(int*)a < *(int*)b)
      192:   12:    return -1;
    20368:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
       15:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
       15:   45:  SelectStream(1);
       15:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       15:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
       15:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      165:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     1650:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
     1500:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
       15:   74:  if (numPlayers == 2)
        -:   75:    {
        6:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
        9:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
        9:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
       15:   88:  if (numPlayers == 2)
        -:   89:    {
        6:   90:      state->supplyCount[estate] = 8;
        6:   91:      state->supplyCount[duchy] = 8;
        6:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
        9:   96:      state->supplyCount[estate] = 12;
        9:   97:      state->supplyCount[duchy] = 12;
        9:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
       15:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  103:  state->supplyCount[silver] = 40;
       15:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      315:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
     2475:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
     2325:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      150:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       30:  116:		  if (numPlayers == 2){ 
        6:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
        9:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
      135:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
      150:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     2175:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       63:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       48:  141:      state->deckCount[i] = 0;
      192:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
      144:  144:	  state->deck[i][j] = estate;
      144:  145:	  state->deckCount[i]++;
        -:  146:	}
      384:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
      336:  149:	  state->deck[i][j] = copper;
      336:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       63:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       48:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
       63:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       48:  167:      state->handCount[i] = 0;
       48:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      420:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      405:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
       15:  183:  state->outpostPlayed = 0;
       15:  184:  state->phase = 0;
       15:  185:  state->numActions = 1;
       15:  186:  state->numBuys = 1;
       15:  187:  state->playedCardCount = 0;
       15:  188:  state->whoseTurn = 0;
       15:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
       90:  193:  for (it = 0; it < 5; it++){
       75:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
       15:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
       15:  199:  return 0;
        -:  200:}
        -:  201:
     7984:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
     7984:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
     7984:  210:  if (state->deckCount[player] < 1)
     3968:  211:    return -1;
     4016:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    28352:  215:  while (state->deckCount[player] > 0) {
    20320:  216:    card = floor(Random() * state->deckCount[player]);
    20320:  217:    newDeck[newDeckPos] = state->deck[player][card];
    20320:  218:    newDeckPos++;
    41329:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
    21009:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
    20320:  222:    state->deckCount[player]--;
        -:  223:  }
    24336:  224:  for (i = 0; i < newDeckPos; i++) {
    20320:  225:    state->deck[player][i] = newDeck[i];
    20320:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
     4016:  229:  return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
    #####:  309:  return 0;
        -:  310:}
        -:  311:
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
    #####:  321:int supplyCount(int card, struct gameState *state) {
    #####:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
   997968:  347:int whoseTurn(struct gameState *state) {
   997968:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
      156:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
      156:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        6:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
      150:  402:    j = 0;
     3900:  403:    for (i = 0; i < 25; i++)
        -:  404:    {
     3750:  405:      if (state->supplyCount[i] == 0)
        -:  406:        {
      258:  407:          j++;
        -:  408:        }
        -:  409:    }
      150:  410:    if ( j >= 3)
        -:  411:    {
       40:  412:      return 1;
        -:  413:    }
        -:  414:
      110:  415:  return 0;
        -:  416:}
        -:  417:
    #####:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
  2992971:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  2992971:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    23808:  534:    for (i = 0; i < state->discardCount[player];i++){
    19840:  535:      state->deck[player][i] = state->discard[player][i];
    19840:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
     3968:  539:    state->deckCount[player] = state->discardCount[player];
     3968:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
     3968:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
     3968:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
     3968:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
     3968:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
     3968:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
     3968:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     3968:  564:    state->deckCount[player]--;
     3968:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
  2989003:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  2989003:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  2989003:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  2989003:  577:    state->deckCount[player]--;
  2989003:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  2992971:  581:  return 0;
        -:  582:}
        -:  583:
       56:  584:int getCost(int cardNumber)
        -:  585:{
       56:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
        2:  589:      return 0;
        -:  590:    case estate:
        2:  591:      return 2;
        -:  592:    case duchy:
        2:  593:      return 5;
        -:  594:    case province:
        2:  595:      return 8;
        -:  596:    case copper:
        2:  597:      return 0;
        -:  598:    case silver:
        2:  599:      return 3;
        -:  600:    case gold:
        2:  601:      return 6;
        -:  602:    case adventurer:
        2:  603:      return 6;
        -:  604:    case council_room:
        2:  605:      return 5;
        -:  606:    case feast:
        2:  607:      return 4;
        -:  608:    case gardens:
        2:  609:      return 4;
        -:  610:    case mine:
        2:  611:      return 5;
        -:  612:    case remodel:
        2:  613:      return 4;
        -:  614:    case smithy:
        2:  615:      return 4;
        -:  616:    case village:
        2:  617:      return 3;
        -:  618:    case baron:
        2:  619:      return 4;
        -:  620:    case great_hall:
        2:  621:      return 3;
        -:  622:    case minion:
        2:  623:      return 5;
        -:  624:    case steward:
        2:  625:      return 3;
        -:  626:    case tribute:
        2:  627:      return 5;
        -:  628:    case ambassador:
        2:  629:      return 3;
        -:  630:    case cutpurse:
        2:  631:      return 4;
        -:  632:    case embargo: 
        2:  633:      return 2;
        -:  634:    case outpost:
        2:  635:      return 5;
        -:  636:    case salvager:
        2:  637:      return 4;
        -:  638:    case sea_hag:
        2:  639:      return 4;
        -:  640:    case treasure_map:
        2:  641:      return 4;
        -:  642:    }
        -:  643:	
        2:  644:  return -1;
        -:  645:}
        -:  646:
        -:  647:
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652://  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:	 return playAdventurer(state);
        -:  673:			
        -:  674:    case council_room:
    #####:  675:	  return playCouncil_Room(state, handPos);
        -:  676:			
        -:  677:    case feast:
        -:  678:      //gain card with cost up to 5
        -:  679:      //Backup hand
    #####:  680:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  681:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  682:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  683:      }
        -:  684:      //Backup hand
        -:  685:
        -:  686:      //Update Coins for Buy
    #####:  687:      updateCoins(currentPlayer, state, 5);
    #####:  688:      x = 1;//Condition to loop on
    #####:  689:      while( x == 1) {//Buy one card
    #####:  690:	if (supplyCount(choice1, state) <= 0){
        -:  691:	  if (DEBUG)
        -:  692:	    printf("None of that card left, sorry!\n");
        -:  693:
        -:  694:	  if (DEBUG){
        -:  695:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  696:	  }
        -:  697:	}
    #####:  698:	else if (state->coins < getCost(choice1)){
    #####:  699:	  printf("That card is too expensive!\n");
        -:  700:
        -:  701:	  if (DEBUG){
        -:  702:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  703:	  }
        -:  704:	}
        -:  705:	else{
        -:  706:
        -:  707:	  if (DEBUG){
        -:  708:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:	  }
        -:  710:
    #####:  711:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  712:	  x = 0;//No more buying cards
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  716:	  }
        -:  717:
        -:  718:	}
        -:  719:      }     
        -:  720:
        -:  721:      //Reset Hand
    #####:  722:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  723:	state->hand[currentPlayer][i] = temphand[i];
    #####:  724:	temphand[i] = -1;
        -:  725:      }
        -:  726:      //Reset Hand
        -:  727:      			
    #####:  728:      return 0;
        -:  729:			
        -:  730:    case gardens:
    #####:  731:      return -1;
        -:  732:			
        -:  733:    case mine:
    #####:  734:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  735:
    #####:  736:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  737:	{
    #####:  738:	  return -1;
        -:  739:	}
        -:  740:		
    #####:  741:      if (choice2 > treasure_map || choice2 < curse)
        -:  742:	{
    #####:  743:	  return -1;
        -:  744:	}
        -:  745:
    #####:  746:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  747:	{
    #####:  748:	  return -1;
        -:  749:	}
        -:  750:
    #####:  751:      gainCard(choice2, state, 2, currentPlayer);
        -:  752:
        -:  753:      //discard card from hand
    #####:  754:      discardCard(handPos, currentPlayer, state, 0);
        -:  755:
        -:  756:      //discard trashed card
    #####:  757:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  758:	{
    #####:  759:	  if (state->hand[currentPlayer][i] == j)
        -:  760:	    {
    #####:  761:	      discardCard(i, currentPlayer, state, 0);			
    #####:  762:	      break;
        -:  763:	    }
        -:  764:	}
        -:  765:			
    #####:  766:      return 0;
        -:  767:			
        -:  768:    case remodel:
    #####:  769:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  770:
    #####:  771:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      gainCard(choice2, state, 0, currentPlayer);
        -:  777:
        -:  778:      //discard card from hand
    #####:  779:      discardCard(handPos, currentPlayer, state, 0);
        -:  780:
        -:  781:      //discard trashed card
    #####:  782:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  783:	{
    #####:  784:	  if (state->hand[currentPlayer][i] == j)
        -:  785:	    {
    #####:  786:	      discardCard(i, currentPlayer, state, 0);			
    #####:  787:	      break;
        -:  788:	    }
        -:  789:	}
        -:  790:
        -:  791:
    #####:  792:      return 0;
        -:  793:		
        -:  794:    case smithy:
    #####:  795:	  return playSmithy(state, handPos);
        -:  796:      /* //+3 Cards
        -:  797:      for (i = 0; i < 3; i++)
        -:  798:	  {
        -:  799:	    drawCard(currentPlayer, state);
        -:  800:	  }
        -:  801:			
        -:  802:      //discard card from hand
        -:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:      return 0; */
        -:  805:		
        -:  806:    case village:
    #####:  807:        return playVillage(state, handPos);
        -:  808:      /*
        -:  809:      //+1 Card
        -:  810:      drawCard(currentPlayer, state);
        -:  811:			
        -:  812:      //+2 Actions
        -:  813:      state->numActions = state->numActions + 2;
        -:  814:			
        -:  815:      //discard played card from hand
        -:  816:      discardCard(handPos, currentPlayer, state, 0);
        -:  817:      return 0;
        -:  818:       */	
        -:  819:    case baron:
    #####:  820:      state->numBuys++;//Increase buys by 1!
    #####:  821:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  822:	int p = 0;//Iterator for hand!
    #####:  823:	int card_not_discarded = 1;//Flag for discard set!
    #####:  824:	while(card_not_discarded){
    #####:  825:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  826:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  827:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  828:	    state->discardCount[currentPlayer]++;
    #####:  829:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  830:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  831:	    }
    #####:  832:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  833:	    state->handCount[currentPlayer]--;
    #####:  834:	    card_not_discarded = 0;//Exit the loop
        -:  835:	  }
    #####:  836:	  else if (p > state->handCount[currentPlayer]){
        -:  837:	    if(DEBUG) {
        -:  838:	      printf("No estate cards in your hand, invalid choice\n");
        -:  839:	      printf("Must gain an estate if there are any\n");
        -:  840:	    }
    #####:  841:	    if (supplyCount(estate, state) > 0){
    #####:  842:	      gainCard(estate, state, 0, currentPlayer);
    #####:  843:	      state->supplyCount[estate]--;//Decrement estates
    #####:  844:	      if (supplyCount(estate, state) == 0){
    #####:  845:		isGameOver(state);
        -:  846:	      }
        -:  847:	    }
    #####:  848:	    card_not_discarded = 0;//Exit the loop
        -:  849:	  }
        -:  850:			    
        -:  851:	  else{
    #####:  852:	    p++;//Next card
        -:  853:	  }
        -:  854:	}
        -:  855:      }
        -:  856:			    
        -:  857:      else{
    #####:  858:	if (supplyCount(estate, state) > 0){
    #####:  859:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  860:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  861:	  if (supplyCount(estate, state) == 0){
    #####:  862:	    isGameOver(state);
        -:  863:	  }
        -:  864:	}
        -:  865:      }
        -:  866:	    
        -:  867:      
    #####:  868:      return 0;
        -:  869:		
        -:  870:    case great_hall:
        -:  871:      //+1 Card
    #####:  872:      drawCard(currentPlayer, state);
        -:  873:			
        -:  874:      //+1 Actions
    #####:  875:      state->numActions++;
        -:  876:			
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
    #####:  879:      return 0;
        -:  880:		
        -:  881:    case minion:
        -:  882:      //+1 action
    #####:  883:      state->numActions++;
        -:  884:			
        -:  885:      //discard card from hand
    #####:  886:      discardCard(handPos, currentPlayer, state, 0);
        -:  887:			
    #####:  888:      if (choice1)		//+2 coins
        -:  889:	{
    #####:  890:	  state->coins = state->coins + 2;
        -:  891:	}
        -:  892:			
    #####:  893:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  894:	{
        -:  895:	  //discard hand
    #####:  896:	  while(numHandCards(state) > 0)
        -:  897:	    {
    #####:  898:	      discardCard(handPos, currentPlayer, state, 0);
        -:  899:	    }
        -:  900:				
        -:  901:	  //draw 4
    #####:  902:	  for (i = 0; i < 4; i++)
        -:  903:	    {
    #####:  904:	      drawCard(currentPlayer, state);
        -:  905:	    }
        -:  906:				
        -:  907:	  //other players discard hand and redraw if hand size > 4
    #####:  908:	  for (i = 0; i < state->numPlayers; i++)
        -:  909:	    {
    #####:  910:	      if (i != currentPlayer)
        -:  911:		{
    #####:  912:		  if ( state->handCount[i] > 4 )
        -:  913:		    {
        -:  914:		      //discard hand
    #####:  915:		      while( state->handCount[i] > 0 )
        -:  916:			{
    #####:  917:			  discardCard(handPos, i, state, 0);
        -:  918:			}
        -:  919:							
        -:  920:		      //draw 4
    #####:  921:		      for (j = 0; j < 4; j++)
        -:  922:			{
    #####:  923:			  drawCard(i, state);
        -:  924:			}
        -:  925:		    }
        -:  926:		}
        -:  927:	    }
        -:  928:				
        -:  929:	}
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case steward:
    #####:  933:	  return playSteward(state, handPos, choice1, choice2, choice3);
        -:  934:
        -:  935:		
        -:  936:    case tribute:
    #####:  937:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  938:	if (state->deckCount[nextPlayer] > 0){
    #####:  939:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  940:	  state->deckCount[nextPlayer]--;
        -:  941:	}
    #####:  942:	else if (state->discardCount[nextPlayer] > 0){
    #####:  943:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  944:	  state->discardCount[nextPlayer]--;
        -:  945:	}
        -:  946:	else{
        -:  947:	  //No Card to Reveal
        -:  948:	  if (DEBUG){
        -:  949:	    printf("No cards to reveal\n");
        -:  950:	  }
        -:  951:	}
        -:  952:      }
        -:  953:	    
        -:  954:      else{
    #####:  955:	if (state->deckCount[nextPlayer] == 0){
    #####:  956:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  957:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  958:	    state->deckCount[nextPlayer]++;
    #####:  959:	    state->discard[nextPlayer][i] = -1;
    #####:  960:	    state->discardCount[nextPlayer]--;
        -:  961:	  }
        -:  962:			    
    #####:  963:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  964:	} 
    #####:  965:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  966:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  967:	state->deckCount[nextPlayer]--;
    #####:  968:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  969:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  970:	state->deckCount[nextPlayer]--;
        -:  971:      }    
        -:  972:		       
    #####:  973:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  974:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  975:	state->playedCardCount++;
    #####:  976:	tributeRevealedCards[1] = -1;
        -:  977:      } 
        -:  978:
    #####:  979:      for (i = 0; i <= 2; i ++){
    #####:  980:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  981:	  state->coins += 2;
        -:  982:	}
        -:  983:		    
    #####:  984:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  985:	  drawCard(currentPlayer, state);
    #####:  986:	  drawCard(currentPlayer, state);
        -:  987:	}
        -:  988:	else{//Action Card
    #####:  989:	  state->numActions = state->numActions + 2;
        -:  990:	}
        -:  991:      }
        -:  992:	    
    #####:  993:      return 0;
        -:  994:		
        -:  995:    case ambassador:
    #####:  996:      j = 0;		//used to check if player has enough cards to discard
        -:  997:
    #####:  998:      if (choice2 > 2 || choice2 < 0)
        -:  999:	{
    #####: 1000:	  return -1;				
        -: 1001:	}
        -: 1002:
    #####: 1003:      if (choice1 == handPos)
        -: 1004:	{
    #####: 1005:	  return -1;
        -: 1006:	}
        -: 1007:
    #####: 1008:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1009:	{
    #####: 1010:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1011:	    {
    #####: 1012:	      j++;
        -: 1013:	    }
        -: 1014:	}
    #####: 1015:      if (j < choice2)
        -: 1016:	{
    #####: 1017:	  return -1;				
        -: 1018:	}
        -: 1019:
        -: 1020:      if (DEBUG) 
        -: 1021:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1022:
        -: 1023:      //increase supply count for choosen card by amount being discarded
    #####: 1024:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1025:			
        -: 1026:      //each other player gains a copy of revealed card
    #####: 1027:      for (i = 0; i < state->numPlayers; i++)
        -: 1028:	{
    #####: 1029:	  if (i != currentPlayer)
        -: 1030:	    {
    #####: 1031:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1032:	    }
        -: 1033:	}
        -: 1034:
        -: 1035:      //discard played card from hand
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1037:
        -: 1038:      //trash copies of cards returned to supply
    #####: 1039:      for (j = 0; j < choice2; j++)
        -: 1040:	{
    #####: 1041:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1042:	    {
    #####: 1043:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1044:		{
    #####: 1045:		  discardCard(i, currentPlayer, state, 1);
    #####: 1046:		  break;
        -: 1047:		}
        -: 1048:	    }
        -: 1049:	}			
        -: 1050:
    #####: 1051:      return 0;
        -: 1052:		
        -: 1053:    case cutpurse:
        -: 1054:
        -: 1055:/*       updateCoins(currentPlayer, state, 2);
        -: 1056:      for (i = 0; i < state->numPlayers; i++)
        -: 1057:	{
        -: 1058:	  if (i != currentPlayer)
        -: 1059:	    {
        -: 1060:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1061:		{
        -: 1062:		  if (state->hand[i][j] == copper)
        -: 1063:		    {
        -: 1064:		      discardCard(j, i, state, 0);
        -: 1065:		      break;
        -: 1066:		    }
        -: 1067:		  if (j == state->handCount[i])
        -: 1068:		    {
        -: 1069:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1070:			{
        -: 1071:			  if (DEBUG)
        -: 1072:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1073:			}	
        -: 1074:		      break;
        -: 1075:		    }		
        -: 1076:		}
        -: 1077:					
        -: 1078:	    }
        -: 1079:				
        -: 1080:	}				
        -: 1081:
        -: 1082:      //discard played card from hand
        -: 1083:      discardCard(handPos, currentPlayer, state, 0); */			
        -: 1084:
    #####: 1085:      return playCutpurse(state, handPos);
        -: 1086:
        -: 1087:		
        -: 1088:    case embargo: 
        -: 1089:      //+2 Coins
    #####: 1090:      state->coins = state->coins + 2;
        -: 1091:			
        -: 1092:      //see if selected pile is in play
    #####: 1093:      if ( state->supplyCount[choice1] == -1 )
        -: 1094:	{
    #####: 1095:	  return -1;
        -: 1096:	}
        -: 1097:			
        -: 1098:      //add embargo token to selected supply pile
    #####: 1099:      state->embargoTokens[choice1]++;
        -: 1100:			
        -: 1101:      //trash card
    #####: 1102:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case outpost:
        -: 1106:      //set outpost flag
    #####: 1107:      state->outpostPlayed++;
        -: 1108:			
        -: 1109:      //discard card
    #####: 1110:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case salvager:
        -: 1114:      //+1 buy
    #####: 1115:      state->numBuys++;
        -: 1116:			
    #####: 1117:      if (choice1)
        -: 1118:	{
        -: 1119:	  //gain coins equal to trashed card
    #####: 1120:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1121:	  //trash card
    #####: 1122:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1123:	}
        -: 1124:			
        -: 1125:      //discard card
    #####: 1126:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1127:      return 0;
        -: 1128:		
        -: 1129:    case sea_hag:
    #####: 1130:      for (i = 0; i < state->numPlayers; i++){
    #####: 1131:	if (i != currentPlayer){
    #####: 1132:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1133:	  state->discardCount[i]++;
    #####: 1134:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1135:	}
        -: 1136:      }
    #####: 1137:      return 0;
        -: 1138:		
        -: 1139:    case treasure_map:
        -: 1140:      //search hand for another treasure_map
    #####: 1141:      index = -1;
    #####: 1142:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1143:	{
    #####: 1144:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1145:	    {
    #####: 1146:	      index = i;
    #####: 1147:	      break;
        -: 1148:	    }
        -: 1149:	}
    #####: 1150:      if (index > -1)
        -: 1151:	{
        -: 1152:	  //trash both treasure cards
    #####: 1153:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1154:	  discardCard(index, currentPlayer, state, 1);
        -: 1155:
        -: 1156:	  //gain 4 Gold cards
    #####: 1157:	  for (i = 0; i < 4; i++)
        -: 1158:	    {
    #####: 1159:	      gainCard(gold, state, 1, currentPlayer);
        -: 1160:	    }
        -: 1161:				
        -: 1162:	  //return success
    #####: 1163:	  return 1;
        -: 1164:	}
        -: 1165:			
        -: 1166:      //no second treasure_map found in hand
    #####: 1167:      return -1;
        -: 1168:    }
        -: 1169:	
    #####: 1170:  return -1;
        -: 1171:}
        -: 1172:
     7936: 1173:int playAdventurer(struct gameState *state){
     7936: 1174:	int drawntreasure = 0;
        -: 1175:	int cardDrawn;
     7936: 1176:	int currentPlayer = whoseTurn(state);
        -: 1177:    int temphand[MAX_HAND];// moved above the if statement
     7936: 1178:    int z = 0;// this is the counter for the temp hand
        -: 1179:
        -: 1180:	
    46624: 1181:	while(drawntreasure<3){
    30752: 1182:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
     3968: 1183:		  shuffle(currentPlayer, state);
        -: 1184:		}
    30752: 1185:		drawCard(currentPlayer, state);
    30752: 1186:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    30752: 1187:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    23808: 1188:		  drawntreasure++;
        -: 1189:		else{
     6944: 1190:		  temphand[z]=cardDrawn;
     6944: 1191:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     6944: 1192:		  z++;
        -: 1193:		}
        -: 1194:	  }
    22816: 1195:	  while(z-1>=0){
     6944: 1196:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     6944: 1197:	   z=z-1;
        -: 1198:	  }
        -: 1199:	  
     7936: 1200:	return 0;
        -: 1201:}
        -: 1202:
        -: 1203://Add 4 cards
        4: 1204:int playCouncil_Room(struct gameState *state, int handPos){
        4: 1205:	int currentPlayer = whoseTurn(state);
        -: 1206:	int i;
        -: 1207:  
       24: 1208:    for (i = 0; i < 5; i++)
        -: 1209:	{
       20: 1210:	  drawCard(currentPlayer, state);
        -: 1211:	}
        -: 1212:			
        -: 1213:    //+1 Buy
        4: 1214:    state->numBuys++;
        -: 1215:			
        -: 1216:    //Each other player draws a card
       20: 1217:    for (i = 0; i < state->numPlayers; i++)
        -: 1218:	{
       16: 1219:	  if ( i != currentPlayer )
        -: 1220:	  {
       12: 1221:	    drawCard(i, state);
        -: 1222:	  }
        -: 1223:	}
        -: 1224:			
        -: 1225:    //put played card in played card pile
        4: 1226:    discardCard(handPos, currentPlayer, state, 0);
        4: 1227:	return 0;
        -: 1228:}
        -: 1229:
   986048: 1230:int playSmithy(struct gameState *state, int handPos){
        -: 1231:    int i;
   986048: 1232:    int currentPlayer = whoseTurn(state);
        -: 1233:
        -: 1234:    //+3 Cards
  3944192: 1235:    for (i = 0; i < 3; i++)
        -: 1236:    {
  2958144: 1237:      drawCard(currentPlayer, state);
        -: 1238:    }
        -: 1239:    	
        -: 1240:    //discard card from hand
   986048: 1241:    discardCard(handPos, currentPlayer, state, 0-1);
   986048: 1242:    return 0;
        -: 1243:}
        -: 1244:
    #####: 1245:int playCutpurse(struct gameState *state, int handPos){
        -: 1246:	int i, j, k;
    #####: 1247:	int currentPlayer = whoseTurn(state);
        -: 1248:
        -: 1249:	
    #####: 1250:    updateCoins(currentPlayer, state, 2);
    #####: 1251:    for (i = 0; i < state->numPlayers; i++)
        -: 1252:	{
    #####: 1253:	  if (i != currentPlayer)
        -: 1254:	  {
    #####: 1255:	    for (j = 0; j <= state->handCount[i]; j++){
    #####: 1256:          if (state->hand[i][j] == copper){
    #####: 1257:	        discardCard(j, i, state, 0);
    #####: 1258:		    return -1;
        -: 1259:	      }
    #####: 1260:	      if (j = state->handCount[i]){
    #####: 1261:            for (k = 0; k < state->handCount[i]; k++){
        -: 1262:		      if (DEBUG)
        -: 1263:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1264:            }	
    #####: 1265:		  return -1;
        -: 1266:          }		
        -: 1267:		}
        -: 1268:					
        -: 1269:	  }//end != currentPlayer switch		
        -: 1270:	}
        -: 1271:
        -: 1272:    //discard played card from hand
    #####: 1273:	discardCard(handPos, currentPlayer, state, 0);
        -: 1274:	
    #####: 1275:	return 0;
        -: 1276:}
        -: 1277:
    #####: 1278:int playSteward(struct gameState *state, int handPos, int choice1, int choice2, int choice3){
    #####: 1279:  int currentPlayer = whoseTurn(state);
        -: 1280:
    #####: 1281:  if (choice1 == 1) {
        -: 1282:  //+2 cards
    #####: 1283:    drawCard(currentPlayer, state);
    #####: 1284:    drawCard(currentPlayer, state);
        -: 1285:  }
    #####: 1286:  else if (choice1 == 2) {
        -: 1287:  //+2 coins
    #####: 1288:    state->coins = state->coins + 2;
        -: 1289:  }
        -: 1290:  else {
        -: 1291:  //trash 2 cards in hand
    #####: 1292:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1293:    discardCard(choice3, currentPlayer, state, 1);
        -: 1294:  }
        -: 1295:	
        -: 1296:  //discard card from hand
    #####: 1297:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1298:  return 0;
        -: 1299:}
        -: 1300:
     3968: 1301:int playVillage(struct gameState *state, int handPos){
     3968: 1302:    int currentPlayer = whoseTurn(state);
        -: 1303:
        -: 1304:    //+1 Card
     3968: 1305:     drawCard(currentPlayer, state);
        -: 1306:
        -: 1307:     //+2 Actions
     3968: 1308:     state->numActions = state->numActions + 2;
        -: 1309:
        -: 1310:     //discard played card from hand
     3968: 1311:     discardCard(handPos, currentPlayer, state, 0);
     3968: 1312:     return 0;
        -: 1313:}
        -: 1314:
   990020: 1315:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1316:{
        -: 1317:	
        -: 1318:  //if card is not trashed, added to Played pile 
   990020: 1319:  if (trashFlag < 1)
        -: 1320:    {
        -: 1321:      //add card to played pile
   990020: 1322:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   990020: 1323:      state->playedCardCount++;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //set played card to -1
   990020: 1327:  state->hand[currentPlayer][handPos] = -1;
        -: 1328:	
        -: 1329:  //remove card from player's hand
   990020: 1330:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1331:    {
        -: 1332:      //reduce number of cards in hand
     3968: 1333:      state->handCount[currentPlayer]--;
        -: 1334:    }
   986052: 1335:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1336:    {
        -: 1337:      //reduce number of cards in hand
    #####: 1338:      state->handCount[currentPlayer]--;
        -: 1339:    }
        -: 1340:  else 	
        -: 1341:    {
        -: 1342:      //replace discarded card with last card in hand
   986052: 1343:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1344:      //set last card to -1
   986052: 1345:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1346:      //reduce number of cards in hand
   986052: 1347:      state->handCount[currentPlayer]--;
        -: 1348:    }
        -: 1349:	
   990020: 1350:  return 0;
        -: 1351:}
        -: 1352:
    #####: 1353:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1354:{
        -: 1355:  //Note: supplyPos is enum of choosen card
        -: 1356:	
        -: 1357:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1358:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1359:    {
    #####: 1360:      return -1;
        -: 1361:    }
        -: 1362:	
        -: 1363:  //added card for [whoseTurn] current player:
        -: 1364:  // toFlag = 0 : add to discard
        -: 1365:  // toFlag = 1 : add to deck
        -: 1366:  // toFlag = 2 : add to hand
        -: 1367:
    #####: 1368:  if (toFlag == 1)
        -: 1369:    {
    #####: 1370:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1371:      state->deckCount[player]++;
        -: 1372:    }
    #####: 1373:  else if (toFlag == 2)
        -: 1374:    {
    #####: 1375:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1376:      state->handCount[player]++;
        -: 1377:    }
        -: 1378:  else
        -: 1379:    {
    #####: 1380:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1381:      state->discardCount[player]++;
        -: 1382:    }
        -: 1383:	
        -: 1384:  //decrease number in supply pile
    #####: 1385:  state->supplyCount[supplyPos]--;
        -: 1386:	 
    #####: 1387:  return 0;
        -: 1388:}
        -: 1389:
      819: 1390:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1391:{
        -: 1392:  int i;
        -: 1393:	
        -: 1394:  //reset coin count
      819: 1395:  state->coins = 0;
        -: 1396:
        -: 1397:  //add coins for each Treasure card in player's hand
     3904: 1398:  for (i = 0; i < state->handCount[player]; i++)
        -: 1399:    {
     3085: 1400:      if (state->hand[player][i] == copper)
        -: 1401:	{
     1068: 1402:	  state->coins += 1;
        -: 1403:	}
     2017: 1404:      else if (state->hand[player][i] == silver)
        -: 1405:	{
     1000: 1406:	  state->coins += 2;
        -: 1407:	}
     1017: 1408:      else if (state->hand[player][i] == gold)
        -: 1409:	{
     1000: 1410:	  state->coins += 3;
        -: 1411:	}	
        -: 1412:    }	
        -: 1413:
        -: 1414:  //add bonus
      819: 1415:  state->coins += bonus;
        -: 1416:
      819: 1417:  return 0;
        -: 1418:}
        -: 1419:
        -: 1420:
        -: 1421://end of dominion.c
        -: 1422:
